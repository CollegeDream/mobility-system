{"ast":null,"code":"const URL = \"http://localhost:5000\";\nexport const fetchDashboardData = async () => {\n  const response = await fetch(\"http://localhost:5000/dashboard\");\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch dashboard data\");\n  }\n  return response.json();\n};\nexport const ingestData = async files => {\n  try {\n    console.log(\"Files sent for ingestion\", files);\n    const response = await fetch(`${URL}/ingest`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(files)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return await response.json(); // Return the server's response\n  } catch (error) {\n    console.error(\"Error during data ingestion:\", error);\n    throw error;\n  }\n};\nexport const processData = async () => {\n  try {\n    const response = await fetch(`${URL}/process`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Failed to process data\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error during data processing:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["URL","fetchDashboardData","response","fetch","ok","Error","json","ingestData","files","console","log","method","headers","body","JSON","stringify","status","error","processData","errorData"],"sources":["C:/Documents/data_processor/mobility-dashboard/src/api.js"],"sourcesContent":["const URL = \"http://localhost:5000\";\r\n\r\nexport const fetchDashboardData = async () => {\r\n    const response = await fetch(\"http://localhost:5000/dashboard\");\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch dashboard data\");\r\n    }\r\n    return response.json();\r\n  };\r\n  \r\n\r\nexport const ingestData = async (files) => {\r\n  try {\r\n    console.log(\"Files sent for ingestion\", files)\r\n    const response = await fetch(`${URL}/ingest`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(files),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json(); // Return the server's response\r\n  } catch (error) {\r\n    console.error(\"Error during data ingestion:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const processData = async () => {\r\n  try {\r\n    const response = await fetch(`${URL}/process`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || \"Failed to process data\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error during data processing:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uBAAuB;AAEnC,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;EAC/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAGH,OAAO,MAAMC,UAAU,GAAG,MAAOC,KAAK,IAAK;EACzC,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,KAAK,CAAC;IAC9C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,GAAG,SAAS,EAAE;MAC5CW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,KAAK;IAC5B,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACc,MAAM,EAAE,CAAC;IAC3D;IAEA,OAAO,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,GAAG,UAAU,EAAE;MAC7CW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMe,SAAS,GAAG,MAAMjB,QAAQ,CAACI,IAAI,CAAC,CAAC;MACvC,MAAM,IAAID,KAAK,CAACc,SAAS,CAACF,KAAK,IAAI,wBAAwB,CAAC;IAC9D;IAEA,OAAO,MAAMf,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}